[{"path":"index.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":"這本 tutorial，是想把我熟悉的 R 語言技巧，轉換到 Python來。並著重在資料分析的領域(還不談ML)。所以就是最無聊但也最常用的幾個 part:\n資料讀取：從 csv, excel; 從 DB; 從 API; …\n資料轉換：tidyr, dplyr, stringr, lubridate, purrr 這些我很熟的 R 套件，轉換到 python 上\n資料視覺化： ggplot, plotly 要轉換到 python\n文件： RMarkdown 看如何轉換成 Jupyter Notebook\n網頁： shiny 轉換成 Dash Flask\nAPI: plumber 轉換成 Flask\n資料讀取：從 csv, excel; 從 DB; 從 API; …資料轉換：tidyr, dplyr, stringr, lubridate, purrr 這些我很熟的 R 套件，轉換到 python 上資料視覺化： ggplot, plotly 要轉換到 python文件： RMarkdown 看如何轉換成 Jupyter Notebook網頁： shiny 轉換成 Dash FlaskAPI: plumber 轉換成 Flask","code":""},{"path":"numpy-basics.html","id":"numpy-basics","chapter":"1 numpy basics","heading":"1 numpy basics","text":"","code":""},{"path":"numpy-basics.html","id":"why-numpy","chapter":"1 numpy basics","heading":"1.1 Why numpy","text":"numpy 是 numeric python 的縮寫，簡單來講，就是要來做數學運算的意思之前學的 list 是無法做數學計算的，所以在 numpy 裡，會把 list 轉成 numpy array 這種型別，就可以做計算了。看個例子：轉成 numpy array 就可以做計算了再看個例子","code":"height = [1.73, 1.68, 1.71, 1.89, 1.79]\nweight = [65.4, 59.2, 63.6, 88.4, 68.7]\nweight/(height**2)\n#> Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'\n#> \n#> Detailed traceback:\n#>   File \"<string>\", line 1, in <module>import numpy as np\nheight = np.array([1.73, 1.68, 1.71, 1.89, 1.79])\nweight = np.array([65.4, 59.2, 63.6, 88.4, 68.7])\nweight/(height**2)\n#> array([21.85171573, 20.97505669, 21.75028214, 24.7473475 , 21.44127836])python_list = [1,2,3]\nprint(python_list + python_list)\n#> [1, 2, 3, 1, 2, 3]\nnumpy_array = np.array([1,2,3])\nprint(numpy_array + numpy_array)\n#> [2 4 6]"},{"path":"numpy-basics.html","id":"多層-list-的介紹","chapter":"1 numpy basics","heading":"1.2 多層 list 的介紹","text":"從剛剛的介紹中，我們知道把 list 轉成 ndarray 後，就可以做數學運算。但剛剛舉的例子都很簡單，比較像是我找10筆數據，存進 list 這個 collection 裡面。但在 python 的 data science 應用中，我們可以收到更多不同類型的數據。例如：\n1張灰階影像的數據，是個矩陣型資料，如何存到 list 中？\n1張彩色影像數據，會是RGB 3 個通道，每個通道都是矩陣型資料，這要如何存到 list 中？\n10 張彩色影像數據，如何存到 list 中？\n5批資料，每批都有 10 張彩色影像，這樣的數據要如何存到 list 中？\n3個年份，每個年份都有5批資料，每批都有 10 張彩色影像，這樣的數據要如何存到 list 中？\n1張灰階影像的數據，是個矩陣型資料，如何存到 list 中？1張彩色影像數據，會是RGB 3 個通道，每個通道都是矩陣型資料，這要如何存到 list 中？10 張彩色影像數據，如何存到 list 中？5批資料，每批都有 10 張彩色影像，這樣的數據要如何存到 list 中？3個年份，每個年份都有5批資料，每批都有 10 張彩色影像，這樣的數據要如何存到 list 中？這些問題可以一直問下去，但大概已經可以發現，我只要用一層又一層的list來儲存，就可以搞定了。","code":""},{"path":"numpy-basics.html","id":"層-list","chapter":"1 numpy basics","heading":"1.2.1 2 層 list","text":"對於1張灰階影像資料，例如是這樣的一張矩陣型資料: \\(\\left[\\begin{array}{cc} 0 & 1\\\\1 & 0 \\\\1 & 1\\end{array}\\right]\\)，可以用數學寫成：\\[\n\\boldsymbol{X} \\R^{3 \\times 2}\n\\]在 python 中，會用這樣的 list 來儲存他：我們總是會很想用矩陣的角度去看他，但拜託你忍一忍，不要這樣做。因為之後要一路推廣下去。所以，我們現在改成用層次的方式來理解他：\\(R^{3 \\times 2}\\) 就讀成: 總共有3列，每一列都有2筆數據。那他的階層就會長成：\n第一列: [0, 1]\n第一列的第一個 element: 0\n第一列的第二個 element: 1\n\n第二列: [1, 0]\n第二列的第一個 element: 1\n第二列的第二個 element: 0\n\n第三列: [1, 1]\n第三列的第一個 element: 1\n第三列的第二個 element: 1\n\n第一列: [0, 1]\n第一列的第一個 element: 0\n第一列的第二個 element: 1\n第一列的第一個 element: 0第一列的第二個 element: 1第二列: [1, 0]\n第二列的第一個 element: 1\n第二列的第二個 element: 0\n第二列的第一個 element: 1第二列的第二個 element: 0第三列: [1, 1]\n第三列的第一個 element: 1\n第三列的第二個 element: 1\n第三列的第一個 element: 1第三列的第二個 element: 1也就是第一層是 \\(R^{3 \\times 2}\\) 的 3，第二層是 \\(R^{3 \\times 2}\\) 的 2所以，我們要練習，這樣寫 list：接著，來定義一些名詞： \\(R^{3 \\times 2}\\)，R的上面有2個數字相乘，我們稱它為2階張量，儲存的資料類型是 2d array。也就是說，這個張量的維度是2。然後 R 上面的長相是 \\(3 \\times 2\\)，所以我們說他的 shape 是 (3,2)我們來看一下這個 numpy array 的 attribute，就可以驗證上面講的內容：ndim 是 2，就表示 ndarray 是 2d array(n=2, 有兩層，R上面有2個數字相乘)shape 是 (3,2)，表示他是 \\(R^{3 \\times 2}\\) 的張量","code":"a = [\n  [0, 1], \n  [1, 0], \n  [1, 1]\n]\na = np.array(a)\na\n#> array([[0, 1],\n#>        [1, 0],\n#>        [1, 1]])# 第一步，先寫出第一層，有3列： a = [[], [], []] \n# 第二步，再把第二層的內容補進去，各2個element： a = [[0, 1], [1, 0], [1, 1]] a.ndim\n#> 2a.shape\n#> (3, 2)"},{"path":"numpy-basics.html","id":"層-list-1","chapter":"1 numpy basics","heading":"1.2.2 3 層 list","text":"對於1張彩色影像資料，他會有3張矩陣型資料，例如長成這樣：\\[\n\\left[\n\\left[\\begin{array}{cc} 0 & 1\\\\1 & 0 \\\\1 & 1\\end{array}\\right],\n\\left[\\begin{array}{cc} 0 & 0\\\\1 & 1 \\\\1 & 0\\end{array}\\right],\n\\left[\\begin{array}{cc} 1 & 1\\\\0 & 0 \\\\0 & 1\\end{array}\\right]\n\\right]\n\\]那我可以寫成這樣：\\(\\boldsymbol{X} \\R^{3 \\times 3 \\times 2}\\)\\[\n\\boldsymbol{X} = \\left[\nR^{3 \\times 2},\nG^{3 \\times 2},\nB^{3 \\times 2}\n\\right]\n\\]\n* 由 \\(R^{3 \\times 3 \\times 2}\\) 已可知道，他是 3d array(所以要給他3層)。shape是 3*3*2，所以第一層有3個 element，第二層有3個element，第三層有2個element。\n* 那我再造 list 時，第一步就是先寫第一層：然後第二層：最後，做出第三層：驗證一下，這個 \\(R^{3 \\times 3 \\times 2}\\) 是 3d array(因為R上面有3個數字相乘，或說，建立list的時候要寫到第3層)。shape是 3*3*2","code":"a = [\n  [],\n  [],\n  []\n]a = [\n  [\n    [],\n    [], \n    []\n  ],\n  [\n    [],\n    [], \n    []\n  ],\n  [\n    [],\n    [], \n    []\n  ]\n]a = [\n  [\n    [0, 1],\n    [1, 0], \n    [1, 1]\n  ],\n  [\n    [0, 0],\n    [1, 1], \n    [1, 0]\n  ],\n  [\n    [1, 1],\n    [0, 0], \n    [0, 1]\n  ]\n]\na = np.array(a)\na\n#> array([[[0, 1],\n#>         [1, 0],\n#>         [1, 1]],\n#> \n#>        [[0, 0],\n#>         [1, 1],\n#>         [1, 0]],\n#> \n#>        [[1, 1],\n#>         [0, 0],\n#>         [0, 1]]])print(f\"the dim of a is {a.ndim}\")\n#> the dim of a is 3\nprint(f\"the shape of a is {a.shape}\")\n#> the shape of a is (3, 3, 2)"},{"path":"numpy-basics.html","id":"層-list-2","chapter":"1 numpy basics","heading":"1.2.3 4 層 list","text":"剛剛介紹完，1張彩色影像資料要如何儲存。那如果 2 張彩色影像數據，要如何存到 list 中？很簡單嘛，現在變成是一個 \\(R^{2張 \\times 3通道 \\times 3列 \\times 2行}\\) 的資料，所以我要做一個 4D array(因為 R 上面有4個數字相乘，list要做到4層)，然後他的 shape 會是 (2,3,3,2)開始造 list ，第一步就是先寫第一層(2張圖片)：然後第二層，每張圖片，都有RGB三個通道：然後，第三層，每個 RGB 中，都有三列：最後，每一列裡面，都有兩個 element:驗證一下，這個 \\(R^{2張 \\times 3通道 \\times 3列 \\times 2行}\\)是 4d array(因為R上面有4個數字相乘，或說，建立list的時候要寫到第4層)。shape是 2*3*3*2","code":"a = [\n  [],\n  []\n]a = [\n  [\n    [],\n    [], \n    []\n  ],\n  [\n    [],\n    [], \n    []\n  ]\n]a = [\n  [\n    [\n      [],\n      [],\n      []\n    ],\n    [\n      [],\n      [],\n      []\n    ], \n    [\n      [],\n      [],\n      []\n    ]\n  ],\n  [\n    [\n      [],\n      [],\n      []\n    ],\n    [\n      [],\n      [],\n      []\n    ], \n    [\n      [],\n      [],\n      []\n    ]\n  ]\n]a = [\n  [\n    [\n      [0, 1],\n      [1, 0], \n      [1, 1]\n    ],\n    [\n      [0, 0],\n      [1, 1], \n      [1, 0]\n    ], \n    [\n      [1, 1],\n      [0, 0], \n      [0, 1]\n    ]\n  ],\n  [\n    [\n      [0, 0],\n      [1, 0], \n      [0, 1]\n    ],\n    [\n      [1, 1],\n      [1, 1], \n      [1, 1]\n    ], \n    [\n      [0, 0],\n      [0, 1], \n      [1, 0]\n    ]\n  ]\n]\na = np.array(a)\na\n#> array([[[[0, 1],\n#>          [1, 0],\n#>          [1, 1]],\n#> \n#>         [[0, 0],\n#>          [1, 1],\n#>          [1, 0]],\n#> \n#>         [[1, 1],\n#>          [0, 0],\n#>          [0, 1]]],\n#> \n#> \n#>        [[[0, 0],\n#>          [1, 0],\n#>          [0, 1]],\n#> \n#>         [[1, 1],\n#>          [1, 1],\n#>          [1, 1]],\n#> \n#>         [[0, 0],\n#>          [0, 1],\n#>          [1, 0]]]])print(f\"the dim of a is {a.ndim}\")\n#> the dim of a is 4\nprint(f\"the shape of a is {a.shape}\")\n#> the shape of a is (2, 3, 3, 2)\nprint(a.size)\n#> 36\nlen(a)\n#> 2"},{"path":"numpy-basics.html","id":"ndarray-的-dim-shape-與-axis","chapter":"1 numpy basics","heading":"1.3 ndarray 的 dim, shape, 與 axis","text":"在 ndarray 中，這三個詞很容易搞混，但又超重要，所以在這裡好好整理一下在 ndarray 中，這三個詞很容易搞混，但又超重要，所以在這裡好好整理一下講到維度，就會想到以前線性代數學到的東西：維度是指向量空間裡基底的數量。簡單的判斷方法，就是把 \\(R\\) 上面的數字乘出來就對了。講到維度，就會想到以前線性代數學到的東西：維度是指向量空間裡基底的數量。簡單的判斷方法，就是把 \\(R\\) 上面的數字乘出來就對了。例如 \\(R^3\\) 表示3維，意思是這個歐式空間中，需要3個基底向量(e.g. \\(\\left[\\begin{array}{cc} 1 \\\\0 \\\\ 0\\end{array}\\right]\\), \\(\\left[\\begin{array}{cc} 0 \\\\1 \\\\ 0\\end{array}\\right]\\), \\(\\left[\\begin{array}{cc} 0 \\\\0 \\\\ 1\\end{array}\\right]\\))，才能span出這個空間。所以我們稱它為 3 維(空間)，這個空間裡的每個點，就是一個3維向量。例如 \\(R^3\\) 表示3維，意思是這個歐式空間中，需要3個基底向量(e.g. \\(\\left[\\begin{array}{cc} 1 \\\\0 \\\\ 0\\end{array}\\right]\\), \\(\\left[\\begin{array}{cc} 0 \\\\1 \\\\ 0\\end{array}\\right]\\), \\(\\left[\\begin{array}{cc} 0 \\\\0 \\\\ 1\\end{array}\\right]\\))，才能span出這個空間。所以我們稱它為 3 維(空間)，這個空間裡的每個點，就是一個3維向量。又例如 \\(R^{2 \\times 2}\\) 是 \\(2 \\times 2\\) = 4維，意思是這個矩陣空間，需要 4 個基底向量(e.g. \\(\\left[\\begin{array}{cc} 1 & 0\\\\0 & 0 \\end{array}\\right]\\), \\(\\left[\\begin{array}{cc} 0 & 1\\\\0 & 0 \\end{array}\\right]\\), \\(\\left[\\begin{array}{cc} 0 & 0\\\\1 & 0 \\end{array}\\right]\\), \\(\\left[\\begin{array}{cc} 0 & 0\\\\0 & 1 \\end{array}\\right]\\))才能span出這個空間，所以我們稱它為 4 維，然後空間中的每個點都是 \\(2 \\times 2\\) 的矩陣。又例如 \\(R^{2 \\times 2}\\) 是 \\(2 \\times 2\\) = 4維，意思是這個矩陣空間，需要 4 個基底向量(e.g. \\(\\left[\\begin{array}{cc} 1 & 0\\\\0 & 0 \\end{array}\\right]\\), \\(\\left[\\begin{array}{cc} 0 & 1\\\\0 & 0 \\end{array}\\right]\\), \\(\\left[\\begin{array}{cc} 0 & 0\\\\1 & 0 \\end{array}\\right]\\), \\(\\left[\\begin{array}{cc} 0 & 0\\\\0 & 1 \\end{array}\\right]\\))才能span出這個空間，所以我們稱它為 4 維，然後空間中的每個點都是 \\(2 \\times 2\\) 的矩陣。對應到 R 的資料結構，就是：\n純量 (\\(R\\)), 對應到 numeric 的資料結構，例如 = 3\nn維向量 (\\(R^n\\)), 對應到 n個element的vector 的資料結構，例如 = c(1,2,3) 為 \\(R^3\\)，三維向量\nm n 矩陣(\\(R^{m \\times n}\\)), 對應到 m*n個 element 的 matrix 的資料結構，例如 = matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) 為 \\(R^{2 \\times 3}\\)\n對應到 R 的資料結構，就是：純量 (\\(R\\)), 對應到 numeric 的資料結構，例如 = 3n維向量 (\\(R^n\\)), 對應到 n個element的vector 的資料結構，例如 = c(1,2,3) 為 \\(R^3\\)，三維向量m n 矩陣(\\(R^{m \\times n}\\)), 對應到 m*n個 element 的 matrix 的資料結構，例如 = matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE) 為 \\(R^{2 \\times 3}\\)那以前只學到矩陣，所以只學到 \\(R^{m \\times n}\\)，那有沒有想過， \\(R^{j \\times m \\times n}\\) 這是什麼東西？甚至，\\(R^{\\times j \\times m \\times n}\\) 這是什麼東西？那以前只學到矩陣，所以只學到 \\(R^{m \\times n}\\)，那有沒有想過， \\(R^{j \\times m \\times n}\\) 這是什麼東西？甚至，\\(R^{\\times j \\times m \\times n}\\) 這是什麼東西？簡單講，這種東西，就叫張量(tensor)。\\(R\\)的上面，如果有 n 個數字相乘，我們就叫他 n 階張量。例如：\n\\(R\\): 0階張量，就是以前學的純量\n\\(R^3\\): 1階張量(因為只有一個數字相乘)，就是以前學的向量\n\\(R^{2 \\times 2}\\): 2階張量(因為有2個數字相乘)，就是以前學的矩陣。對應到資料，就像是灰階影像，長寬各2個pixel。\n\\(R^{3 \\times 2 \\times 2}\\): 3階張量(因為有3個數字相乘)，這以前就沒學過了。對應到的資料，就像是彩色影像，3個通道(RGB)，每個通道都是長寬各2個pixel。\n\\(R^{5 \\times 3 \\times 2 \\times 2}\\): 4階張量(因為有4個數字相乘)。對應到的資料，就是有5張彩色影像。每張彩色影像，都有3個通道(RGB)，每個通道，都是長寬各2個pixel。\n簡單講，這種東西，就叫張量(tensor)。\\(R\\)的上面，如果有 n 個數字相乘，我們就叫他 n 階張量。例如：\\(R\\): 0階張量，就是以前學的純量\\(R^3\\): 1階張量(因為只有一個數字相乘)，就是以前學的向量\\(R^{2 \\times 2}\\): 2階張量(因為有2個數字相乘)，就是以前學的矩陣。對應到資料，就像是灰階影像，長寬各2個pixel。\\(R^{3 \\times 2 \\times 2}\\): 3階張量(因為有3個數字相乘)，這以前就沒學過了。對應到的資料，就像是彩色影像，3個通道(RGB)，每個通道都是長寬各2個pixel。\\(R^{5 \\times 3 \\times 2 \\times 2}\\): 4階張量(因為有4個數字相乘)。對應到的資料，就是有5張彩色影像。每張彩色影像，都有3個通道(RGB)，每個通道，都是長寬各2個pixel。那這個時候，我們講維度，就是在講 張量 的維度。那這個時候，我們講維度，就是在講 張量 的維度。所以，以前學的維度，在描述的對象，都是 向量空間 。所以，以前學的維度，在描述的對象，都是 向量空間 。那接下來要講的維度，他要描述的對象，是資料結構裡的陣列(array)，在python中叫他list，在deep learning中叫他tensor(張量)。都是同義詞。我們 focus 在 list 就好。那接下來要講的維度，他要描述的對象，是資料結構裡的陣列(array)，在python中叫他list，在deep learning中叫他tensor(張量)。都是同義詞。我們 focus 在 list 就好。但在 Python 世界，就直接推廣到 張量(tensor) 的概念。而張量對應的資料結構，就是 ndarray(n-dim array, n階張量)但在 Python 世界，就直接推廣到 張量(tensor) 的概念。而張量對應的資料結構，就是 ndarray(n-dim array, n階張量)重點來了，張量是啥？n-dim 的 dim 又是啥？ 哈哈笑死，這邊的 dim(維度) 根本就和以前線性代數學的不一樣，不要執著以前學過的定義，這樣會卡死。重點來了，張量是啥？n-dim 的 dim 又是啥？ 哈哈笑死，這邊的 dim(維度) 根本就和以前線性代數學的不一樣，不要執著以前學過的定義，這樣會卡死。腦袋轉一下，直接來學新的系統。n-d array 的 d，是指 $R$ 上面有 d 個數字相乘，所以他的維度d (d-dimension)，就是指R上面有d個數字相乘。對應到list的資料結構，就是有d個階層。以下逐一介紹：腦袋轉一下，直接來學新的系統。n-d array 的 d，是指 $R$ 上面有 d 個數字相乘，所以他的維度d (d-dimension)，就是指R上面有d個數字相乘。對應到list的資料結構，就是有d個階層。以下逐一介紹：","code":""},{"path":"numpy-basics.html","id":"d-array-0-dim-array-0階張量-0層的資料結構","chapter":"1 numpy basics","heading":"1.3.1 0D array = 0-dim array = 0階張量 = 0層的資料結構","text":"例如純量3， \\(3 \\R\\)，R上面有0個數字相乘，所以他叫 0D array。來看一下在 python 的資料結構會長怎樣：我們可以用 .ndim 這個屬性，來看他的dim，也就是幾D array:很明顯的，告訴我他是個 0D array然後用 .shape，來看他的 shape是空的，也就是 \\(R^{()}\\) 這樣的意思，裡面就是沒東西相乘","code":"a = np.array(3)\nprint(a)\n#> 3\nprint(type(a))\n#> <class 'numpy.ndarray'>a.ndim\n#> 0a.shape\n#> ()"},{"path":"numpy-basics.html","id":"階張量-1d-array","chapter":"1 numpy basics","heading":"1.3.2 1 階張量 (1D array)","text":"1 階張量，就是 \\(R\\)的上面，有 1 個數字相乘。相乘的樣貌就叫shape舉個例子，\\(\\left[\\begin{array}{cc} 2 \\\\3 \\\\ 4\\end{array}\\right] \\R^{3}\\)，所以這樣的資料，應該是 1D array, 然後 shape = 3在 python 的資料結構中，我就是用 1 層的list來處理：","code":"a = np.array([2,3,4])\nprint(a)\n#> [2 3 4]\nprint(type(a))\n#> <class 'numpy.ndarray'>\nprint(f\"the dim of a is {a.ndim}\")\n#> the dim of a is 1\nprint(f\"the shape of a is {a.shape}\")\n#> the shape of a is (3,)"},{"path":"numpy-basics.html","id":"階張量-2d-array","chapter":"1 numpy basics","heading":"1.3.3 2 階張量 (2D array)","text":"灰階影像的數據，就都是長這樣。舉例來說，我拿到的影像，長寬都只有2個像素，所以長成\\(\\left[\\begin{array}{cc} 1 & 2\\\\3 & 4 \\end{array}\\right] \\R^{2 \\times 2}\\)那\\(R\\)的上面，有 2 個數字相乘，所以是 2D array。相乘的樣貌是2*2，所以shape為(2,2)那這種2D array，在python就是存成 2-dim array，也就是 2 層的list：從這邊開始，要特別注意 2D array 就是 2層list結構。可以這樣思考。:\n[,]\n1\n2\n\n[,]\n3\n4\n\n[,]\n1\n2\n12[,]\n3\n4\n34所以由左到右看，第一層有2個 element，第二層也是2個element。第一層我們又叫他第0軸(axis = 0)，第二層我們又叫他第1軸(axis=1)。","code":"# 2 層的結構  \na = [\n  [1,2],\n  [3,4]\n]\na = np.array(a)\nprint(a)\n#> [[1 2]\n#>  [3 4]]\nprint(type(a))\n#> <class 'numpy.ndarray'>\nprint(f\"the dim of a is {a.ndim}\")\n#> the dim of a is 2\nprint(f\"the shape of a is {a.shape}\")\n#> the shape of a is (2, 2)len(a)\n#> 2"},{"path":"numpy-basics.html","id":"階張量-3d-array","chapter":"1 numpy basics","heading":"1.3.4 3 階張量 (3D array)","text":"","code":""},{"path":"numpy-basics.html","id":"階張量-4d-array","chapter":"1 numpy basics","heading":"1.3.5 4 階張量 (4D array)","text":"","code":""}]
